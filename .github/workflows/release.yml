name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19

    - name: Build
      run: go build -v ./...
      
    - name: Go Vet
      run: go vet ./...
      
    - name: Go Tidy
      run: go mod tidy && git diff --exit-code

    - name: Go Mod
      run: go mod download

    - name: Go Mod Verify
      run: go mod verify
      
    - name: Go Generate
      run: go generate ./... && git diff --exit-code

    - name: Go Build
      run: go build -o /dev/null ./...

    - name: Test
      run: go test -v -coverprofile=coverage.txt -shuffle=on ./...

    - name: Upload Coverage
      if: ${{ !inputs.skipTests }}  # upload when we really run our tests
      uses: codecov/codecov-action@v3
      continue-on-error: true  # we don't care if it fails
      with:
          token: ${{secrets.CODECOV_TOKEN}}  # set in repository settings
          file: ./coverage.txt  # file from the previous step
          fail_ci_if_error: false

  push-docker-image:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - uses: actions/checkout@v3

    - name: Create firebase token file      
      run: |
        echo "${FIREBASE}" >> firebase.json
      shell: bash
      env:
        FIREBASE: ${{ secrets.FIREBASE }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push        
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/fiufit-api-gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push-docker-image
    steps:      
    - name: checkout
      uses: actions/checkout@v3

    - uses: okteto/context@latest
      with:
        token: ${{ secrets.OKTETO_TOKEN }}

    - name: Rollout deployment
      env:
        CREDENTIALS: ${{secrets.KUBE_CREDENTIALS}}
      run: |
        echo "$CREDENTIALS" >> okteto-kube.config
        export KUBECONFIG=$PWD/okteto-kube.config:${KUBECONFIG:-$HOME}/.kube/config}
        kubectl rollout restart deployment/service-external-gateway --namespace=franco-jyq
